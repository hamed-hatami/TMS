package ir.university.toosi.tms.view.calendar;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import ir.university.toosi.tms.model.entity.BLookup;
import ir.university.toosi.tms.model.entity.WebServiceInfo;
import ir.university.toosi.tms.model.entity.calendar.Calendar;
import ir.university.toosi.tms.model.entity.calendar.WeekDay;
import ir.university.toosi.tms.util.RESTfulClientUtil;
import ir.university.toosi.tms.util.ThreadPoolManager;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.swingbinding.JTableBinding;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class WeekDayManagement extends JInternalFrame {

    /**
     * Creates new form ContactEditor
     */
    public WeekDayManagement(Calendar calendar) {
        fillWeekDayCombo();
        this.calendar = calendar;
        mainPanel = new JPanel();
        tableScroll = new JScrollPane();
        mainTable = new JTable();
        add = new JButton();
        delete = new JButton();
        addPanel = new JPanel();
        fromDay = new JComboBox(weekDayItems);
        toDay = new JComboBox(weekDayItems);
        fromTime = new JTextField();
        toTime = new JTextField();
        holiday = new JCheckBox();
        fromDayLabel = new JLabel();
        toDayLabel = new JLabel();
        fromTimeLabel = new JLabel();
        toTimeLabel = new JLabel();

        try {
            initComponents();
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }

    public WeekDayManagement(JDesktopPane jDesktopPane, Calendar calendar) {
        fillWeekDayCombo();
        this.calendar = calendar;
        jdpDesktop = jDesktopPane;
        mainPanel = new JPanel();
        tableScroll = new JScrollPane();
        mainTable = new JTable();
        add = new JButton();
        delete = new JButton();
        addPanel = new JPanel();
        fromDay = new JComboBox(weekDayItems);
        toDay = new JComboBox(weekDayItems);
        fromTime = new JTextField();
        toTime = new JTextField();
        holiday = new JCheckBox();
        fromDayLabel = new JLabel();
        toDayLabel = new JLabel();
        fromTimeLabel = new JLabel();
        toTimeLabel = new JLabel();
        try {
            initComponents();
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }

    private void fillWeekDayCombo() {
        bLookupService.setServiceName("/getByLookupCode");
        String lookupCode = "WeekDayType";
        try {
            weekDayItemList = new ObjectMapper().readValue(new RESTfulClientUtil().restFullServiceString(bLookupService.getServerUrl(), bLookupService.getServiceName(), lookupCode), new TypeReference<List<BLookup>>() {
            });
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        weekDayItems = new String[weekDayItemList.size()];
        int i = 0;
        for (BLookup blookup : weekDayItemList) {
            weekDayItems[i++] = blookup.getCode();
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    public void initComponents() throws IOException {


        this.addInternalFrameListener(ThreadPoolManager.mainForm);
        setClosable(true);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("WEEKDAYMANAGEMENT");

        mainPanel.setBorder(BorderFactory.createTitledBorder("WEEKDAYMANAGEMENT"));

        mainTable.setAutoCreateRowSorter(true);
        refresh();


        mainTable.setColumnSelectionAllowed(true);
        tableScroll.setViewportView(mainTable);
        mainTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);


        holiday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxSelection(evt);
            }
        });

        add.setText("ADD");
        add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    addActionPerformed(evt);
                } catch (PropertyVetoException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
            }
        });

        delete.setText("DELETE");
        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                int result = JOptionPane.showConfirmDialog(null, "DELETE_USER", "DELETE", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    deleteActionPerformed(evt);
                }


            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                                .add(36, 36, 36)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jPanel1Layout.createSequentialGroup()
                                                .add(delete))
                                        .add(tableScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(delete))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(tableScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(133, 133, 133))
        );

        addPanel.setBorder(BorderFactory.createTitledBorder("ADDWEEKDAY"));

        fromDayLabel.setText("FROMDAY");
        toDayLabel.setText("TODAY");
        fromTimeLabel.setText("FROMTIME");
        toTimeLabel.setText("TOTIME");
        holiday.setText("HOLIDAY");
        holiday.setSelected(true);
        fromTime.setText("");
        toTime.setText("");
        fromTime.setEnabled(!holiday.isSelected());
        toTime.setEnabled(!holiday.isSelected());

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(addPanel);
        addPanel.setLayout(jPanel2Layout);
        addPanel.setBorder(BorderFactory.createTitledBorder("WEEKDAY"));
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel2Layout.createSequentialGroup()
                                .add(50, 50, 50)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(jPanel2Layout.createSequentialGroup()
                                                .add(fromDayLabel)
                                                .add(16, 16, 16))
                                        .add(jPanel2Layout.createSequentialGroup()
                                                .add(fromTimeLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(fromTime)
                                        .add(fromDay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                                .add(31, 31, 31)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(toDayLabel)
                                        .add(toTimeLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(toTime, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                        .add(toDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(30, 30, 30))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                                .add(117, 117, 117)
                                .add(holiday)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 178, Short.MAX_VALUE)
                                .add(add)
                                .add(97, 97, 97))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(fromDayLabel)
                                        .add(fromDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(toDayLabel)
                                        .add(toDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(26, 26, 26)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(fromTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(fromTimeLabel)
                                        .add(toTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(toTimeLabel))
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jPanel2Layout.createSequentialGroup()
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 37, Short.MAX_VALUE)
                                                .add(add)
                                                .add(23, 23, 23))
                                        .add(jPanel2Layout.createSequentialGroup()
                                                .add(29, 29, 29)
                                                .add(holiday)
                                                .addContainerGap())))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(addPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(mainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .add(addPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(mainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 221, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.getAccessibleContext().setAccessibleName("WeekDayForm");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public void refresh() throws IOException {

        holiday.setSelected(true);
        fromTime.setText("");
        toTime.setText("");
        fromTime.setEnabled(!holiday.isSelected());
        toTime.setEnabled(!holiday.isSelected());
        weekDayService.setServiceName("/findWeekDayByCalendar");
        weekDayList = new ObjectMapper().readValue(new RESTfulClientUtil().restFullService(weekDayService.getServerUrl(), weekDayService.getServiceName(), new ObjectMapper().writeValueAsString(calendar.getId())), new TypeReference<List<WeekDay>>() {
        });

        JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, weekDayList, mainTable, "");
        JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fromDayType}"));
        columnBinding.setColumnName("FROMDAY");
        columnBinding.setColumnClass(BLookup.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${toDayType}"));
        columnBinding.setColumnName("TODAY");
        columnBinding.setColumnClass(BLookup.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${startTime}"));
        columnBinding.setColumnName("STARTTIME");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${endTime}"));
        columnBinding.setColumnName("ENDTIME");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${holiday}"));
        columnBinding.setColumnName("HOLIDAY");
        columnBinding.setColumnClass(Boolean.class);
        BindingGroup bindingGroup = new BindingGroup();
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
    }

    private void deleteActionPerformed(ActionEvent evt) {

        int[] indexes = new int[mainTable.getSelectedRows().length];
        int j = 0;
        for (int i : mainTable.getSelectedRows()) {
            indexes[j++] = mainTable.convertRowIndexToModel(i);
        }

        List<WeekDay> deletedWeekDays = new ArrayList<>();
        for (int index : indexes) {
            WeekDay weekDay = weekDayList.get(index);
            weekDay.setEffectorUser(ThreadPoolManager.me.getUsername());
            deletedWeekDays.add(weekDay);
        }

        weekDayService.setServiceName("/deleteWeekDays");
        try {
            new ObjectMapper().readValue(new RESTfulClientUtil().restFullService(weekDayService.getServerUrl(), weekDayService.getServiceName(), new ObjectMapper().writeValueAsString(deletedWeekDays)), Boolean.class);
            refresh();
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }

    private void checkboxSelection(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        fromTime.setEnabled(!holiday.isSelected());
        toTime.setEnabled(!holiday.isSelected());
    }//GEN-LAST:event_jButton1ActionPerformed


    private void addActionPerformed(ActionEvent evt) throws PropertyVetoException {//GEN-FIRST:event_jButton1ActionPerformed

        WeekDay weekDay = new WeekDay();
        weekDay.setCalendar(calendar);
        weekDay.setFromDayType(weekDayItemList.get(fromDay.getSelectedIndex()));
        weekDay.setToDayType(weekDayItemList.get(toDay.getSelectedIndex()));
        weekDay.setStartTime(fromTime.getText());
        weekDay.setEndTime(toTime.getText());
        weekDay.setHoliday(holiday.isSelected());
        weekDay.setEffectorUser(ThreadPoolManager.me.getUsername());

        weekDayService.setServiceName("/createWeekDay");
        try {
            new ObjectMapper().readValue(new RESTfulClientUtil().restFullService(weekDayService.getServerUrl(), weekDayService.getServiceName(), new ObjectMapper().writeValueAsString(weekDay)), WeekDay.class);
            refresh();
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton add;
    private JButton delete;
    private JComboBox fromDay;
    private JComboBox toDay;
    private JTextField fromTime;
    private JTextField toTime;
    private JCheckBox holiday;
    private JLabel fromDayLabel;
    private JLabel toDayLabel;
    private JLabel fromTimeLabel;
    private JLabel toTimeLabel;
    private WebServiceInfo weekDayService = new WebServiceInfo();
    private JPanel mainPanel;
    private JPanel addPanel;
    private JScrollPane tableScroll;
    private JTable mainTable;
    private JDesktopPane jdpDesktop;
    private List<WeekDay> weekDayList = new ArrayList<>();
    private String[] weekDayItems;
    private Calendar calendar;
    private List<BLookup> weekDayItemList = new ArrayList<>();
    private WebServiceInfo bLookupService = new WebServiceInfo();

    public JTable getMainTable() {
        return mainTable;
    }
    // End of variables declaration//GEN-END:variables
}
